<engine:UXML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:engine="UnityEngine.UIElements" xmlns:editor="UnityEditor.UIElements" noNamespaceSchemaLocation="../../UIElementsSchema/UIElements.xsd" editor-extension-mode="False">
    <Style src="project://database/Assets/UI%20Toolkit/MainScreen.uss?fileID=7433441132597879392&amp;guid=1b48f71d9bc30de45b2941a364ff9c59&amp;type=3#MainScreen" />
    <engine:VisualElement name="MainTitleArea" class="MainTitleArea">
        <engine:Label text="UML &amp; UI Toolkit" name="MainTitle" class="MainTitle" />
    </engine:VisualElement>
    <engine:VisualElement name="PageBackground" class="PageBackground">
        <VolumeLabel name="VolumeLabel" style="-unity-font-definition: url(&quot;project://database/Assets/Resurces/Fonts/LibreBaskerville-Bold.ttf?fileID=12800000&amp;guid=fc020cb770f01e941b8cacff78703a51&amp;type=3#LibreBaskerville-Bold&quot;); font-size: 36px;" />
        <engine:VisualElement style="flex-grow: 1; height: 5%; max-height: 5%;" />
        <engine:Label text="The UxmlAttribute example demonstrates the modern approach to creating custom UI Toolkit elements in Unity 6. Here&apos;s a detailed explanation of what&apos;s happening:&#10;&#10;1. Class Declaration:&#10;   The custom element is defined as a partial class inheriting from VisualElement and decorated with the [UxmlElement] attribute. This attribute tells Unity that this class can be used as a custom element in UXML.&#10;&#10;2. Custom Attributes:&#10;   Properties within the class are marked with the [UxmlAttribute] attribute. This indicates that these properties can be set via UXML attributes when using the custom element.&#10;&#10;3. Property Implementation:&#10;   Each property has a getter and setter. The setter includes logic to update the element&apos;s text when the value changes.&#10;&#10;4. Constructor:&#10;   The constructor initializes the element by calling UpdateText() and registering a callback to update the text when the element is attached to the panel.&#10;&#10;5. UpdateText Method:&#10;   This method updates the element&apos;s text to display the current volume value.&#10;&#10;6. UXML Usage:&#10;   The custom element can be used in UXML files by specifying the element name and setting its attributes.&#10;&#10;7. C# Usage:&#10;   The example shows how to interact with the custom element programmatically, including changing its volume and triggering text updates.&#10;&#10;This approach simplifies the process of creating custom UI Toolkit elements by eliminating the need for separate UxmlFactory and UxmlTraits classes. It leverages code generation to handle UXML parsing and attribute binding, making the implementation more straightforward and less error-prone." style="-unity-font-definition: url(&quot;project://database/Assets/Resurces/Fonts/LibreBaskerville-Regular.ttf?fileID=12800000&amp;guid=6a62aaa05cdcfff4cacde48ac116ef47&amp;type=3#LibreBaskerville-Regular&quot;); font-size: 18px; white-space: pre-wrap;" />
    </engine:VisualElement>
</engine:UXML>
