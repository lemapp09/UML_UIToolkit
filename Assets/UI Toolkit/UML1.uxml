<engine:UXML xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:engine="UnityEngine.UIElements" xmlns:editor="UnityEditor.UIElements" noNamespaceSchemaLocation="../../UIElementsSchema/UIElements.xsd" editor-extension-mode="False">
    <Style src="project://database/Assets/UI%20Toolkit/MainScreen.uss?fileID=7433441132597879392&amp;guid=1b48f71d9bc30de45b2941a364ff9c59&amp;type=3#MainScreen" />
    <engine:VisualElement name="MainTitleArea" picking-mode="Ignore" class="MainTitleArea">
        <engine:Label text="UML &amp; UI Toolkit" name="MainTitle" class="MainTitle" />
    </engine:VisualElement>
    <engine:VisualElement name="PageBackground" class="PageBackground" style="flex-direction: row;">
        <engine:VisualElement name="LeftColumn" class="LeftColumn">
            <engine:VisualElement name="Banner" style="flex-grow: 1; height: 80px; width: 480px; background-image: url(&quot;project://database/Assets/Resurces/Texture/Banner1.png?fileID=2800000&amp;guid=6db917bce6d6a9248a0d199488daaf8e&amp;type=3#Banner1&quot;); background-size: 480px 60px;" />
            <engine:Label text="What is UML?" style="height: 7%; -unity-font-definition: url(&quot;project://database/Assets/Resurces/Fonts/LibreBaskerville-Bold.ttf?fileID=12800000&amp;guid=fc020cb770f01e941b8cacff78703a51&amp;type=3#LibreBaskerville-Bold&quot;); font-size: 48px;" />
            <engine:ScrollView style="height: 55%;">
                <engine:Label text="Unified Modeling Language (UML) is a standardized visual modeling language used for specifying, visualizing, constructing, and documenting the artifacts of software systems, as well as for business modeling and other non-software systems. First developed in 1990s.&#10;&#10;UML is like a special drawing tool that helps people plan and explain how software or systems work, much like blueprints for a building. Imagine you’re designing a video game or an app, and you need to show how all the pieces fit together before building it. UML helps you do that by using diagrams instead of paragraphs of text. &#10;What is Flowcharting in Game Development?&#10;Flowcharting uses diagrams with shapes (e.g., rectangles, diamonds, arrows) to represent:&#10;    • Processes: Steps in gameplay or game logic.&#10;    • Decisions: Choices players make and their consequences.&#10;    • Transitions: Movement between levels or states in the game.&#10;Applications of Flowcharting&#10;    1. Gameplay Mechanics:&#10;        ◦ Visualize how core systems work (e.g., combat, inventory management).&#10;        ◦ Example: A flowchart showing how a player picks up an item and adds it to their inventory.&#10;    2. Level Design:&#10;        ◦ Map out how levels connect and flow together.&#10;        ◦ Example: Showing paths through a dungeon with branching rooms and a final boss.&#10;    3. Story Progression:&#10;        ◦ Represent branching narratives or decision trees for story-driven games.&#10;        ◦ Example: Player choices affecting NPC responses or unlocking new quests.&#10;    4. Debugging and Testing:&#10;        ◦ Identify bottlenecks or logical errors in user flows.&#10;        ◦ Example: Testing menu navigation or tutorial steps.&#10;Benefits&#10;    • Clarity: Simplifies complex systems into easy-to-understand visuals.&#10;    • Collaboration: Provides a shared understanding among team members (designers, programmers, testers).&#10;    • Efficiency: Helps identify issues early, saving time during development.&#10;    • Flexibility: Allows for easy modifications when new ideas arise." style="-unity-font-definition: url(&quot;project://database/Assets/Resurces/Fonts/LibreBaskerville-Regular.ttf?fileID=12800000&amp;guid=6a62aaa05cdcfff4cacde48ac116ef47&amp;type=3#LibreBaskerville-Regular&quot;); white-space: normal;" />
            </engine:ScrollView>
            <engine:VisualElement style="flex-grow: 1;" />
            <engine:VisualElement name="OldSchoolTool" style="flex-grow: 1; background-image: url(&quot;project://database/Assets/Resurces/Texture/OldSchoolTool.png?fileID=2800000&amp;guid=b86a9840f0b40224ca16c0ac31d086e9&amp;type=3#OldSchoolTool&quot;); background-size: 636px 342px; width: 424px; height: 228px;" />
            <engine:VisualElement style="flex-grow: 1;" />
        </engine:VisualElement>
        <engine:VisualElement name="RightColumn" class="RightColumn">
            <engine:VisualElement name="Banner" class="UMLTitleGraphic" style="flex-grow: 1; height: 4%;" />
            <engine:Label text="What is UML?" style="height: 7%; -unity-font-definition: url(&quot;project://database/Assets/Resurces/Fonts/LibreBaskerville-Bold.ttf?fileID=12800000&amp;guid=fc020cb770f01e941b8cacff78703a51&amp;type=3#LibreBaskerville-Bold&quot;); font-size: 48px;" />
            <engine:ScrollView style="height: 90%;">
                <engine:Label text="Unified Modeling Language (UML) is a standardized visual modeling language used for specifying, visualizing, constructing, and documenting the artifacts of software systems, as well as for business modeling and other non-software systems. First developed in 1990s.&#10;&#10;UML is like a special drawing tool that helps people plan and explain how software or systems work, much like blueprints for a building. Imagine you’re designing a video game or an app, and you need to show how all the pieces fit together before building it. UML helps you do that by using diagrams instead of paragraphs of text. &#10;What is Flowcharting in Game Development?&#10;Flowcharting uses diagrams with shapes (e.g., rectangles, diamonds, arrows) to represent:&#10;    • Processes: Steps in gameplay or game logic.&#10;    • Decisions: Choices players make and their consequences.&#10;    • Transitions: Movement between levels or states in the game.&#10;Applications of Flowcharting&#10;    1. Gameplay Mechanics:&#10;        ◦ Visualize how core systems work (e.g., combat, inventory management).&#10;        ◦ Example: A flowchart showing how a player picks up an item and adds it to their inventory.&#10;    2. Level Design:&#10;        ◦ Map out how levels connect and flow together.&#10;        ◦ Example: Showing paths through a dungeon with branching rooms and a final boss.&#10;    3. Story Progression:&#10;        ◦ Represent branching narratives or decision trees for story-driven games.&#10;        ◦ Example: Player choices affecting NPC responses or unlocking new quests.&#10;    4. Debugging and Testing:&#10;        ◦ Identify bottlenecks or logical errors in user flows.&#10;        ◦ Example: Testing menu navigation or tutorial steps.&#10;Benefits&#10;    • Clarity: Simplifies complex systems into easy-to-understand visuals.&#10;    • Collaboration: Provides a shared understanding among team members (designers, programmers, testers).&#10;    • Efficiency: Helps identify issues early, saving time during development.&#10;    • Flexibility: Allows for easy modifications when new ideas arise." style="-unity-font-definition: url(&quot;project://database/Assets/Resurces/Fonts/LibreBaskerville-Regular.ttf?fileID=12800000&amp;guid=6a62aaa05cdcfff4cacde48ac116ef47&amp;type=3#LibreBaskerville-Regular&quot;); white-space: normal;" />
            </engine:ScrollView>
            <engine:Button text="Home" name="HomeButton" class="HomeButton" style="align-self: auto; align-items: auto; align-content: auto; justify-content: flex-start; -unity-text-align: middle-left; width: 18%;" />
        </engine:VisualElement>
    </engine:VisualElement>
</engine:UXML>
